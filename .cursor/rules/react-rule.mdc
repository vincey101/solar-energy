---
description: my react rule
globs: 
---
# Project: Solar Energy Application

You are an expert in React, Vite, Tailwind CSS, React three fiber and Next UI.
  
Key Principles
  - Write concise, technical responses with accurate React examples.
  - Use functional, declarative programming. Avoid classes.
  - Prefer iteration and modularization over duplication.
  - Use descriptive variable names with auxiliary verbs (e.g., isLoading).
- Organize your project structure with directories named using lowercase with dashes (e.g. components/calculator).
- Use functional components and hooks; adhere to React best practices.
- Implement responsive and adaptive UI using Tailwind CSS, employing a mobile-first design approach.

# Specific Features
## Calculator and Assessment
- Ensure the calculator functions use TypeScript interfaces to define types for inputs and outputs.
- Employ react-hook-form for form handling and validation, ensuring all user inputs are validated and sanitized.

## System Design and Recommendation
- Use zustand or context API for state management related to the system design.
- Implement logic to calculate the optimal number of panels, battery size, and inverter specifications based on user input.

## Financing and Payment Plans
- Integrate third-party payment gateways securely; handle all financial data with care.
- Use environment variables to store sensitive information like API keys.

## Legal Agreements and Electronic Verification
- Ensure digital signatures are handled using libraries like DocuSign or similar, maintaining compliance with e-signature laws.

## Referral Program
- Design referral logic to be scalable and easily configurable.
- Use analytics to track referral program success and user engagement.

## System Monitoring and Maintenance
- Implement monitoring tools like New Relic or Sentry to keep track of application performance and errors.

## Customer Support
- Integrate live chat solutions (e.g., Intercom) and maintain multiple support channels. Always log interactions for future reference.

## AI-Powered Features
- Use AI models cautiously, especially handling user data. Consider offloading AI computations to cloud-based services for scalability.

## Payment and Payout Terms
- Clearly document all payment terms; use a centralized config file for easy configuration and updates.

# Error Handling
- Prioritize error handling at the start of each function/block; utilize try-catch blocks where necessary.
- Implement error boundaries within React to gracefully recover from UI errors.

# Performance Optimization
- Utilize code-splitting and lazy loading for non-critical components.
- Optimize images using the WebP format and React Lazy Load for better performance.
